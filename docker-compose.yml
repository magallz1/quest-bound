services:

  client:
    build:
      context: ./client
      args:
        VITE_API_ENDPOINT: ${API_ENDPOINT}
        VITE_DOMAIN:       ${DOMAIN}
    container_name: quest-bound-client
    environment:
      VITE_API_ENDPOINT: ${API_ENDPOINT}
      VITE_DOMAIN: ${DOMAIN}
    depends_on:
      server:
        condition: service_healthy
    networks:
      - quest-bound
    ports:
      - 5173:5173
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  server:
    build:
      context: ./server
    container_name: quest-bound-server
    env_file:
      - .env
    environment:
      API_ENDPOINT: ${API_ENDPOINT}
      DOMAIN: ${DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quest-bound
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  redis:
    image: redis/redis-stack-server:latest
    container_name: quest-bound-redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    expose:
      6379
    networks:
      - quest-bound

  postgres:
    image: postgres:latest
    restart: always
    container_name: quest-bound-db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${DATABASE_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    expose:
      - 5432
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - quest-bound

volumes:
  pg-data:

networks:
  quest-bound:
